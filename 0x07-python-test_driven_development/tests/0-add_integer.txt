Test case for 0-add_integer module
==================================

Usage
=====

Importing function from the module:
	>>> add_integer = __import__('0-add_integer').add_integer

Adding integers (a = 1 and b = 2)
	>>> add_integer(1, 2)
	3

Subtracting (a = 100 and b = -2)
	>>> add_integer(100, -2)
	98

Adding with default value (a = 2.0 and b = 98)
	>>> add_integer(2.1)
	100

Subtracting (a = 100.3 and b = -2)
	>>> add_integer(100.3, -2)
	98

Adding an integer number and a string (a = 4 and b = "School")
	>>> add_integer(4, "School")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Passing None
	>>> add_integer(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Adding a letter and a number (a = 'm' and b = 1)
	>>> add_integer('m', 1)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Adding two letters (a = 'm' and b = 'n')
	>>> add_integer('m', 'n')
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Adding a tuple
	>>> add_integer((1, 1))
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Adding a number and a list
	>>> add_integer(123, [])
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Passing a string
	>>> add_integer("Hello")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Adding two float numbers (a = 2.5 and b = 3.5)
	>>> add_integer(2.3, 3.5)
	5

Subtracting (a = -1 and b = 98)
	>>> add_integer(-1)
	97

Case Overflow:

	>>> add_integer(float('inf'), 0)
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

Case Overflow 2:

	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

Case NaN:

	>>> add_integer(0, float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer
